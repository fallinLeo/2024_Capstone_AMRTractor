#!/usr/bin/env python
PACKAGE = "hybrid_astar"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

size_enum = gen.enum([ gen.const("lethal",      int_t, 0, "lethal 100/254"),
                       gen.const("inscribed",   int_t, 1, "inscribed 99/253"),],
                     "An enum to set size")


gen.add("voronoi_smooth",   int_t,    2, "vornoi smoothing cell size", 3,  1, 10)
gen.add("voronoi_lethal",   int_t,    2, "A size parameter which is edited via an enum", 0, 0, 1, edit_method=size_enum)
gen.add("tractor_width",    double_t, 4, "tractor width",    0.633,   0.1,   3)
gen.add("tractor_length",   double_t, 4, "tractor length",   0.662,   0.1,   3)
gen.add("trailer_width",    double_t, 4, "trailer width",    0.643,   0.1,   3)
gen.add("trailer_length",   double_t, 4, "trailer length",   1.000,   0.1,   3)
gen.add("robot_bloating",   double_t, 4, "robot padding",    0.05, 0.01,   1)
gen.add("headings",         int_t,    4, "the number of headings that robot can have", 36, 10, 360)
gen.add("robot_radius",     double_t, 0, "minimun radius",    2, 0.3,   10)
gen.add("primitive_length", double_t, 0, "primitive length",  0.3, 0.1, 1)
gen.add("directions",       int_t,    0, "forward search directions, it should be odd number",  11, 3, 20)

gen.add("penaltyTurning",   double_t, 0, "penalty about non straigth path",  1.4, 0.0, 3)
gen.add("penaltyReversing", double_t, 0, "penalty reverse",  3.0, 0.0, 3)
gen.add("penaltyCOD",       double_t, 0, "penalty gear changing", 1.8, 0.0, 3)

gen.add("dubinsShotDistance", double_t, 0, "distance start to Analytic Expansion", 5, 3, 20)

gen.add("opti_voroObsDMax", double_t, 0, "voronoi optimzation distance", 3, 0.5, 10)
gen.add("opti_alpha",       double_t, 0, "optimzation strength",   0.20, 0.01, 1.0)
gen.add("opti_wObstacle",   double_t, 0, "weight for the obstacle term",   0.05, 0.0, 1.0)
gen.add("opti_wVoronoi",    double_t, 0, "weight for the voronoi term",    0.5, 0.0, 1.0)
gen.add("opti_wCurvature",  double_t, 0, "weight for the curvature term",  0.0, 0.0, 1.0)
gen.add("opti_wSmoothness", double_t, 0, "weight for the smoothness term", 1.0, 0.0, 1.0)
gen.add("opti_maxIterations", int_t , 0, "max iteration for optimization", 200, 0, 1000)


# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)


gen.generate(PACKAGE, "ha_planner_lib", "constants")
exit(gen.generate(PACKAGE, "hybrid_astar", "constants"))
