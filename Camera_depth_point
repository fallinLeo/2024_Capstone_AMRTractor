import cv2
import pyrealsense2 as rs
import numpy as np

with open("green.txt", "r") as f:
    greens = f.readlines()
    greens = [line.rstrip('\n') for line in greens]
    greens = list(map(int, greens))

if greens[0] < 10:
    # 마스크 3개씩
    lower_green1 = np.array([greens[0]-10+180, greens[1], greens[1]])
    upper_green1 = np.array([180, 255, 255])
    lower_green2 = np.array([0, greens[1], greens[1]])
    upper_green2 = np.array([greens[0], 255, 255])
    lower_green3 = np.array([greens[0], greens[1], greens[1]])
    upper_green3 = np.array([greens[0]+10, 255, 255])

elif greens[0] > 170:
    lower_green1 = np.array([greens[0], greens[1], greens[1]])
    upper_green1 = np.array([180, 255, 255])
    lower_green2 = np.array([0, greens[1], greens[1]])
    upper_green2 = np.array([greens[0]+10-180, 255, 255])
    lower_green3 = np.array([greens[0]-10, greens[1], greens[1]])
    upper_green3 = np.array([greens[0], 255, 255])

else:
    lower_green1 = np.array([greens[0], greens[1], greens[1]])
    upper_green1 = np.array([greens[0]+10, 255, 255])
    lower_green2 = np.array([greens[0]-10, greens[1], greens[1]])
    upper_green2 = np.array([greens[0], 255, 255])
    lower_green3 = np.array([greens[0]-10, greens[1], greens[1]])
    upper_green3 = np.array([greens[0], 255, 255])

kernel = np.ones((11,11), np.uint8)

class Depth_Camera():

    def __init__(self):
        self.pipeline = rs.pipeline()
        self.config = rs.config()
        self.align = None
        self.align_to = None

        context = rs.context()
        connect_device = None
        if context.devices[0].get_info(rs.camera_info.name).lower() != 'platform camera':
            connect_device = context.devices[0].get_info(rs.camera_info.serial_number)

        print(" > Serial number : {}".format(connect_device))
        self.config.enable_device(connect_device)
        self.config.enable_stream(rs.stream.depth, 1280, 720, rs.format.z16,6)
        self.config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 6)

    def __del__(self):
        print("Collecting process is done.\n")

    def execute(self):
        print('Collecting depth information...')
        x1,y1,x2,y2,x3,y3,x4,y4 = 0,0,0,0,0,0,0,0
        try:
            self.pipeline.start(self.config)
        except:
            print("There is no signal sended from depth camera.")
            print("Check connection status of camera.")
            return
        self.align_to = rs.stream.color
        self.align = rs.align(self.align_to)

        try:
            while True:

                frames = self.pipeline.wait_for_frames()
                aligned_frames = self.align.process(frames)
                depth_frame = aligned_frames.get_depth_frame()
                color_frame = aligned_frames.get_color_frame()
                depth_info = depth_frame.as_depth_frame()

                color_image = np.asanyarray(color_frame.get_data())
                img_hsv1 = cv2.cvtColor(color_image, cv2.COLOR_BGR2HSV)
                img_Gmask1 = cv2.inRange(img_hsv1, lower_green1, upper_green1)
                img_Gmask2 = cv2.inRange(img_hsv1, lower_green2, upper_green2)
                img_Gmask3 = cv2.inRange(img_hsv1, lower_green3, upper_green3)
                img_maskGreen = img_Gmask1 | img_Gmask2 | img_Gmask3
                img_maskGreen = cv2.morphologyEx(img_maskGreen, cv2.MORPH_OPEN, kernel) 
                img_maskGreen = cv2.morphologyEx(img_maskGreen, cv2.MORPH_CLOSE, kernel)
                numOfLabels1, img_label1, stats1, centroids1 = cv2.connectedComponentsWithStats(img_maskGreen)
                for idx, centroid in enumerate(centroids1): #---------------------------------Green-------------------------
                    if stats1[idx][0] == 0 and stats1[idx][1] == 0:
                        continue
                    if np.any(np.isnan(centroid)):
                        continue
                    x, y, width, height, area = stats1[idx]
                    #if(area <=10000):
                    #    continue
                    x1,y1,x2,y2,x3,y3,x4,y4 = x,y,x+width,y,x,y+height,x+width,y+height  
                    centerX, centerY = int(centroid[0]), int(centroid[1]) 
                print("er : ", x,y, width,height, "/area: ",area)
                print("Depth : ", round((depth_info.get_distance(x1, y1) * 100), 2), "cm", round((depth_info.get_distance(x2-1, y2) * 100), 2),"cm",round((depth_info.get_distance(x3, y3-1) * 100), 2),"cm",round((depth_info.get_distance(x4-1, y4-1) * 100), 2),"cm" )
                cv2.namedWindow('RealSense', cv2.WINDOW_AUTOSIZE)
                color_image1 = cv2.circle(color_image, (x1, y1), 5, (0, 0, 255), -1)
                color_image2 = cv2.circle(color_image, (x2, y2), 5, (0, 255, 0), -1)
                color_image3 = cv2.circle(color_image, (x3, y3), 5, (255, 0, 0), -1)
                color_image4 = cv2.circle(color_image, (x4, y4), 5, (0, 0, 0), -1)
                cv2.imshow('RealSense', color_image1)
                cv2.imshow('RealSense', color_image2)
                cv2.imshow('RealSense', color_image3)
                cv2.imshow('RealSense', color_image4)
                cv2.imshow('img_mask', img_maskGreen)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

        finally:
            self.pipeline.stop()
        print("┌──────────────────────────────────────┐")
        print('│ Collecting of depth info is stopped. │')
        print("└──────────────────────────────────────┘")

if __name__ == "__main__":
    depth_camera = Depth_Camera()
    depth_camera.execute()
